{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#write url where data is logged:\n",
    "#for example: \n",
    "url=\"https://gist.githubusercontent.com/Neyt/1dfb0709ba68af2cd11db2d0d837419e/raw/0e6e4d8667cde9ca7135a2b5a5dac5bf5883c548/Master.csv\"\n",
    "#(just replace whats in between \" \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "### Write Hypotesis:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "#First import libraies\n",
    "import io #to request data from a link\n",
    "import requests #to request data from a link\n",
    "import csv\n",
    "import os #to see working directory where we are located\n",
    "import sys #only needed to determine Python version number\n",
    "import matplotlib #only needed to determine Matplotlib version number\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from scipy import stats #to discard outliers\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "from collections import Counter\n",
    "import matplotlib.patches as mpatches\n",
    "# matplotlib Enable inline plotting\n",
    "%matplotlib inline\n",
    "# pylanb inline is a command that lets you show plots in ipython notebook.\n",
    "%pylab inline \n",
    "#sets size in all documents graph\n",
    "pylab.rcParams['figure.figsize'] = (18.5, 10.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\Ney\\\\Google Drive\\\\8) computer_programs\\\\Jupyter\\\\dandp0-bikeshareanalysis'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#where are we working?\n",
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Python version 2.7.11 |Anaconda 4.0.0 (64-bit)| (default, Feb 16 2016, 09:58:36) [MSC v.1500 64 bit (AMD64)]\n",
      "Pandas version 0.18.0\n",
      "Matplotlib version 1.5.1\n"
     ]
    }
   ],
   "source": [
    "#review what python version we are using, Pandas and Matplotlib\n",
    "print('Python version ' + sys.version)\n",
    "print('Pandas version ' + pd.__version__)\n",
    "print('Matplotlib version ' + matplotlib.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#set up format\n",
    "sns.set(style=\"white\", color_codes=True) #sets the background color https://stanford.edu/~mwaskom/software/seaborn/tutorial/aesthetics.html\n",
    "plt.rcParams[\"axes.labelsize\"] = 16.\n",
    "plt.rcParams[\"xtick.labelsize\"] = 14.\n",
    "plt.rcParams[\"ytick.labelsize\"] = 14.\n",
    "plt.rcParams[\"legend.fontsize\"] = 12.\n",
    "plt.rcParams[\"figure.figsize\"] = [15., 6.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>playerID</th>\n",
       "      <th>birthYear</th>\n",
       "      <th>birthMonth</th>\n",
       "      <th>birthDay</th>\n",
       "      <th>birthCountry</th>\n",
       "      <th>birthState</th>\n",
       "      <th>birthCity</th>\n",
       "      <th>deathYear</th>\n",
       "      <th>deathMonth</th>\n",
       "      <th>deathDay</th>\n",
       "      <th>...</th>\n",
       "      <th>nameLast</th>\n",
       "      <th>nameGiven</th>\n",
       "      <th>weight</th>\n",
       "      <th>height</th>\n",
       "      <th>bats</th>\n",
       "      <th>throws</th>\n",
       "      <th>debut</th>\n",
       "      <th>finalGame</th>\n",
       "      <th>retroID</th>\n",
       "      <th>bbrefID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>aardsda01</td>\n",
       "      <td>1981.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>USA</td>\n",
       "      <td>CO</td>\n",
       "      <td>Denver</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>Aardsma</td>\n",
       "      <td>David Allan</td>\n",
       "      <td>220.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>2004-04-06</td>\n",
       "      <td>2015-08-23</td>\n",
       "      <td>aardd001</td>\n",
       "      <td>aardsda01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>aaronha01</td>\n",
       "      <td>1934.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>USA</td>\n",
       "      <td>AL</td>\n",
       "      <td>Mobile</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>Aaron</td>\n",
       "      <td>Henry Louis</td>\n",
       "      <td>180.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>1954-04-13</td>\n",
       "      <td>1976-10-03</td>\n",
       "      <td>aaroh101</td>\n",
       "      <td>aaronha01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>aaronto01</td>\n",
       "      <td>1939.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>USA</td>\n",
       "      <td>AL</td>\n",
       "      <td>Mobile</td>\n",
       "      <td>1984.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>...</td>\n",
       "      <td>Aaron</td>\n",
       "      <td>Tommie Lee</td>\n",
       "      <td>190.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>1962-04-10</td>\n",
       "      <td>1971-09-26</td>\n",
       "      <td>aarot101</td>\n",
       "      <td>aaronto01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>aasedo01</td>\n",
       "      <td>1954.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>USA</td>\n",
       "      <td>CA</td>\n",
       "      <td>Orange</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>Aase</td>\n",
       "      <td>Donald William</td>\n",
       "      <td>190.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>1977-07-26</td>\n",
       "      <td>1990-10-03</td>\n",
       "      <td>aased001</td>\n",
       "      <td>aasedo01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>abadan01</td>\n",
       "      <td>1972.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>USA</td>\n",
       "      <td>FL</td>\n",
       "      <td>Palm Beach</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>Abad</td>\n",
       "      <td>Fausto Andres</td>\n",
       "      <td>184.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>L</td>\n",
       "      <td>L</td>\n",
       "      <td>2001-09-10</td>\n",
       "      <td>2006-04-13</td>\n",
       "      <td>abada001</td>\n",
       "      <td>abadan01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>abadfe01</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>D.R.</td>\n",
       "      <td>La Romana</td>\n",
       "      <td>La Romana</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>Abad</td>\n",
       "      <td>Fernando Antonio</td>\n",
       "      <td>220.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>L</td>\n",
       "      <td>L</td>\n",
       "      <td>2010-07-28</td>\n",
       "      <td>2015-10-03</td>\n",
       "      <td>abadf001</td>\n",
       "      <td>abadfe01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    playerID  birthYear  birthMonth  birthDay birthCountry birthState  \\\n",
       "0  aardsda01     1981.0        12.0      27.0          USA         CO   \n",
       "1  aaronha01     1934.0         2.0       5.0          USA         AL   \n",
       "2  aaronto01     1939.0         8.0       5.0          USA         AL   \n",
       "3   aasedo01     1954.0         9.0       8.0          USA         CA   \n",
       "4   abadan01     1972.0         8.0      25.0          USA         FL   \n",
       "5   abadfe01     1985.0        12.0      17.0         D.R.  La Romana   \n",
       "\n",
       "    birthCity  deathYear  deathMonth  deathDay    ...     nameLast  \\\n",
       "0      Denver        NaN         NaN       NaN    ...      Aardsma   \n",
       "1      Mobile        NaN         NaN       NaN    ...        Aaron   \n",
       "2      Mobile     1984.0         8.0      16.0    ...        Aaron   \n",
       "3      Orange        NaN         NaN       NaN    ...         Aase   \n",
       "4  Palm Beach        NaN         NaN       NaN    ...         Abad   \n",
       "5   La Romana        NaN         NaN       NaN    ...         Abad   \n",
       "\n",
       "          nameGiven weight height bats throws       debut   finalGame  \\\n",
       "0       David Allan  220.0   75.0    R      R  2004-04-06  2015-08-23   \n",
       "1       Henry Louis  180.0   72.0    R      R  1954-04-13  1976-10-03   \n",
       "2        Tommie Lee  190.0   75.0    R      R  1962-04-10  1971-09-26   \n",
       "3    Donald William  190.0   75.0    R      R  1977-07-26  1990-10-03   \n",
       "4     Fausto Andres  184.0   73.0    L      L  2001-09-10  2006-04-13   \n",
       "5  Fernando Antonio  220.0   73.0    L      L  2010-07-28  2015-10-03   \n",
       "\n",
       "    retroID    bbrefID  \n",
       "0  aardd001  aardsda01  \n",
       "1  aaroh101  aaronha01  \n",
       "2  aarot101  aaronto01  \n",
       "3  aased001   aasedo01  \n",
       "4  abada001   abadan01  \n",
       "5  abadf001   abadfe01  \n",
       "\n",
       "[6 rows x 24 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#import the data and read it and example\n",
    "\n",
    "url=\"https://gist.githubusercontent.com/Neyt/1dfb0709ba68af2cd11db2d0d837419e/raw/0e6e4d8667cde9ca7135a2b5a5dac5bf5883c548/Master.csv\"\n",
    "s=requests.get(url).content\n",
    "df=pd.read_csv(io.StringIO(s.decode('utf-8')))\n",
    "df.head(6) #we are just printing the first 6 roads\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 18846 entries, 0 to 18845\n",
      "Data columns (total 24 columns):\n",
      "playerID        18846 non-null object\n",
      "birthYear       18703 non-null float64\n",
      "birthMonth      18531 non-null float64\n",
      "birthDay        18382 non-null float64\n",
      "birthCountry    18773 non-null object\n",
      "birthState      18220 non-null object\n",
      "birthCity       18647 non-null object\n",
      "deathYear       9336 non-null float64\n",
      "deathMonth      9335 non-null float64\n",
      "deathDay        9334 non-null float64\n",
      "deathCountry    9329 non-null object\n",
      "deathState      9277 non-null object\n",
      "deathCity       9325 non-null object\n",
      "nameFirst       18807 non-null object\n",
      "nameLast        18846 non-null object\n",
      "nameGiven       18807 non-null object\n",
      "weight          17975 non-null float64\n",
      "height          18041 non-null float64\n",
      "bats            17655 non-null object\n",
      "throws          17868 non-null object\n",
      "debut           18653 non-null object\n",
      "finalGame       18653 non-null object\n",
      "retroID         18792 non-null object\n",
      "bbrefID         18845 non-null object\n",
      "dtypes: float64(8), object(16)\n",
      "memory usage: 3.5+ MB\n"
     ]
    }
   ],
   "source": [
    "#variables in the spread sheet:\n",
    "df.info() #and type of data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of columns (variables): 24\n",
      "Number of rows (players): 18846\n",
      "how many Nan are in the DataFrame:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "playerID           0\n",
       "birthYear        143\n",
       "birthMonth       315\n",
       "birthDay         464\n",
       "birthCountry      73\n",
       "birthState       626\n",
       "birthCity        199\n",
       "deathYear       9510\n",
       "deathMonth      9511\n",
       "deathDay        9512\n",
       "deathCountry    9517\n",
       "deathState      9569\n",
       "deathCity       9521\n",
       "nameFirst         39\n",
       "nameLast           0\n",
       "nameGiven         39\n",
       "weight           871\n",
       "height           805\n",
       "bats            1191\n",
       "throws           978\n",
       "debut            193\n",
       "finalGame        193\n",
       "retroID           54\n",
       "bbrefID            1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Now we are going to see how much data is in the DataFrame and how mush is incomplete (Nan)\n",
    "print \"Number of columns (variables):\", df.shape[1] #gives number of column count\n",
    "Number_of_players = len(df)\n",
    "print \"Number of rows (players):\", len(df)\n",
    "print \"how many Nan are in the DataFrame:\"\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "\n",
    "#drop the NaN\n",
    "df=df.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of columns (variables) after dropping Nan: 24\n",
      "Number of rows (players) after dropping Nan: 7743\n",
      "how many Nan are in the DataFrame:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "playerID        0\n",
       "birthYear       0\n",
       "birthMonth      0\n",
       "birthDay        0\n",
       "birthCountry    0\n",
       "birthState      0\n",
       "birthCity       0\n",
       "deathYear       0\n",
       "deathMonth      0\n",
       "deathDay        0\n",
       "deathCountry    0\n",
       "deathState      0\n",
       "deathCity       0\n",
       "nameFirst       0\n",
       "nameLast        0\n",
       "nameGiven       0\n",
       "weight          0\n",
       "height          0\n",
       "bats            0\n",
       "throws          0\n",
       "debut           0\n",
       "finalGame       0\n",
       "retroID         0\n",
       "bbrefID         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#now lets verify that we dropped all the incomplete data:\n",
    "    \n",
    "print \"Number of columns (variables) after dropping Nan:\", df.shape[1] #gives number of col count\n",
    "Number_of_players = len(df)\n",
    "print \"Number of rows (players) after dropping Nan:\", len(df)\n",
    "print \"how many Nan are in the DataFrame:\"\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>birthYear</th>\n",
       "      <th>birthMonth</th>\n",
       "      <th>birthDay</th>\n",
       "      <th>deathYear</th>\n",
       "      <th>deathMonth</th>\n",
       "      <th>deathDay</th>\n",
       "      <th>weight</th>\n",
       "      <th>height</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7743.000000</td>\n",
       "      <td>7743.000000</td>\n",
       "      <td>7743.000000</td>\n",
       "      <td>7743.000000</td>\n",
       "      <td>7743.000000</td>\n",
       "      <td>7743.000000</td>\n",
       "      <td>7743.000000</td>\n",
       "      <td>7743.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1900.986956</td>\n",
       "      <td>6.623531</td>\n",
       "      <td>15.505489</td>\n",
       "      <td>1970.784192</td>\n",
       "      <td>6.487537</td>\n",
       "      <td>15.486116</td>\n",
       "      <td>176.676999</td>\n",
       "      <td>71.229498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>22.802567</td>\n",
       "      <td>3.478568</td>\n",
       "      <td>8.747864</td>\n",
       "      <td>27.370872</td>\n",
       "      <td>3.526783</td>\n",
       "      <td>8.800512</td>\n",
       "      <td>15.984142</td>\n",
       "      <td>2.359051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1836.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1877.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>43.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1886.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>1953.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>165.000000</td>\n",
       "      <td>70.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1900.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>1972.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>175.000000</td>\n",
       "      <td>71.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1917.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>1993.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>185.000000</td>\n",
       "      <td>73.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1992.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>2016.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>320.000000</td>\n",
       "      <td>81.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         birthYear   birthMonth     birthDay    deathYear   deathMonth  \\\n",
       "count  7743.000000  7743.000000  7743.000000  7743.000000  7743.000000   \n",
       "mean   1900.986956     6.623531    15.505489  1970.784192     6.487537   \n",
       "std      22.802567     3.478568     8.747864    27.370872     3.526783   \n",
       "min    1836.000000     1.000000     1.000000  1877.000000     1.000000   \n",
       "25%    1886.000000     4.000000     8.000000  1953.000000     3.000000   \n",
       "50%    1900.000000     7.000000    15.000000  1972.000000     6.000000   \n",
       "75%    1917.000000    10.000000    23.000000  1993.000000    10.000000   \n",
       "max    1992.000000    12.000000    31.000000  2016.000000    12.000000   \n",
       "\n",
       "          deathDay       weight       height  \n",
       "count  7743.000000  7743.000000  7743.000000  \n",
       "mean     15.486116   176.676999    71.229498  \n",
       "std       8.800512    15.984142     2.359051  \n",
       "min       1.000000    65.000000    43.000000  \n",
       "25%       8.000000   165.000000    70.000000  \n",
       "50%      15.000000   175.000000    71.000000  \n",
       "75%      23.000000   185.000000    73.000000  \n",
       "max      31.000000   320.000000    81.000000  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe() #we can see the data statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#take outliers off hight and weight\n",
    "df = df[np.abs(df.height-df.height.mean())<=(3*df.height.std())] #keep only the ones that are within +3 to -3 standard deviations in the column 'df.height'.\n",
    "df = df[np.abs(df.weight-df.weight.mean())<=(3*df.weight.std())]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>birthYear</th>\n",
       "      <th>birthMonth</th>\n",
       "      <th>birthDay</th>\n",
       "      <th>deathYear</th>\n",
       "      <th>deathMonth</th>\n",
       "      <th>deathDay</th>\n",
       "      <th>weight</th>\n",
       "      <th>height</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7648.000000</td>\n",
       "      <td>7648.000000</td>\n",
       "      <td>7648.000000</td>\n",
       "      <td>7648.000000</td>\n",
       "      <td>7648.000000</td>\n",
       "      <td>7648.000000</td>\n",
       "      <td>7648.000000</td>\n",
       "      <td>7648.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1900.956590</td>\n",
       "      <td>6.620816</td>\n",
       "      <td>15.499738</td>\n",
       "      <td>1970.803086</td>\n",
       "      <td>6.487578</td>\n",
       "      <td>15.490063</td>\n",
       "      <td>176.427694</td>\n",
       "      <td>71.231695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>22.649828</td>\n",
       "      <td>3.479740</td>\n",
       "      <td>8.750916</td>\n",
       "      <td>27.313464</td>\n",
       "      <td>3.524482</td>\n",
       "      <td>8.803830</td>\n",
       "      <td>14.989417</td>\n",
       "      <td>2.257905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1840.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1877.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>130.000000</td>\n",
       "      <td>65.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1886.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>1953.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>165.000000</td>\n",
       "      <td>70.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1900.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>1972.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>175.000000</td>\n",
       "      <td>71.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1917.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>1993.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>185.000000</td>\n",
       "      <td>73.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1992.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>2016.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>223.000000</td>\n",
       "      <td>78.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         birthYear   birthMonth     birthDay    deathYear   deathMonth  \\\n",
       "count  7648.000000  7648.000000  7648.000000  7648.000000  7648.000000   \n",
       "mean   1900.956590     6.620816    15.499738  1970.803086     6.487578   \n",
       "std      22.649828     3.479740     8.750916    27.313464     3.524482   \n",
       "min    1840.000000     1.000000     1.000000  1877.000000     1.000000   \n",
       "25%    1886.000000     4.000000     8.000000  1953.000000     3.000000   \n",
       "50%    1900.000000     7.000000    15.000000  1972.000000     6.000000   \n",
       "75%    1917.000000    10.000000    23.000000  1993.000000    10.000000   \n",
       "max    1992.000000    12.000000    31.000000  2016.000000    12.000000   \n",
       "\n",
       "          deathDay       weight       height  \n",
       "count  7648.000000  7648.000000  7648.000000  \n",
       "mean     15.490063   176.427694    71.231695  \n",
       "std       8.803830    14.989417     2.257905  \n",
       "min       1.000000   130.000000    65.000000  \n",
       "25%       8.000000   165.000000    70.000000  \n",
       "50%      15.000000   175.000000    71.000000  \n",
       "75%      23.000000   185.000000    73.000000  \n",
       "max      31.000000   223.000000    78.000000  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "df.describe() #we can see the data statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>playerID</th>\n",
       "      <th>birthYear</th>\n",
       "      <th>birthMonth</th>\n",
       "      <th>birthDay</th>\n",
       "      <th>birthCountry</th>\n",
       "      <th>birthState</th>\n",
       "      <th>birthCity</th>\n",
       "      <th>deathYear</th>\n",
       "      <th>deathMonth</th>\n",
       "      <th>deathDay</th>\n",
       "      <th>...</th>\n",
       "      <th>nameLast</th>\n",
       "      <th>nameGiven</th>\n",
       "      <th>weight</th>\n",
       "      <th>height</th>\n",
       "      <th>bats</th>\n",
       "      <th>throws</th>\n",
       "      <th>debut</th>\n",
       "      <th>finalGame</th>\n",
       "      <th>retroID</th>\n",
       "      <th>bbrefID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7648</td>\n",
       "      <td>7648.000000</td>\n",
       "      <td>7648.000000</td>\n",
       "      <td>7648.000000</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648.000000</td>\n",
       "      <td>7648.000000</td>\n",
       "      <td>7648.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648.000000</td>\n",
       "      <td>7648.000000</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>7648</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14</td>\n",
       "      <td>123</td>\n",
       "      <td>3065</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>4777</td>\n",
       "      <td>5574</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>4479</td>\n",
       "      <td>4510</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>glenned01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USA</td>\n",
       "      <td>PA</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>Smith</td>\n",
       "      <td>John Joseph</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>1942-04-14</td>\n",
       "      <td>1945-09-30</td>\n",
       "      <td>gerab101</td>\n",
       "      <td>glenned01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7415</td>\n",
       "      <td>823</td>\n",
       "      <td>236</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>73</td>\n",
       "      <td>45</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5115</td>\n",
       "      <td>6268</td>\n",
       "      <td>20</td>\n",
       "      <td>39</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1900.956590</td>\n",
       "      <td>6.620816</td>\n",
       "      <td>15.499738</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1970.803086</td>\n",
       "      <td>6.487578</td>\n",
       "      <td>15.490063</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>176.427694</td>\n",
       "      <td>71.231695</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>22.649828</td>\n",
       "      <td>3.479740</td>\n",
       "      <td>8.750916</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>27.313464</td>\n",
       "      <td>3.524482</td>\n",
       "      <td>8.803830</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.989417</td>\n",
       "      <td>2.257905</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1840.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1877.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>130.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1886.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1953.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>165.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1900.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1972.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>175.000000</td>\n",
       "      <td>71.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1917.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1993.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>185.000000</td>\n",
       "      <td>73.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1992.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>223.000000</td>\n",
       "      <td>78.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         playerID    birthYear   birthMonth     birthDay birthCountry  \\\n",
       "count        7648  7648.000000  7648.000000  7648.000000         7648   \n",
       "unique       7648          NaN          NaN          NaN           14   \n",
       "top     glenned01          NaN          NaN          NaN          USA   \n",
       "freq            1          NaN          NaN          NaN         7415   \n",
       "mean          NaN  1900.956590     6.620816    15.499738          NaN   \n",
       "std           NaN    22.649828     3.479740     8.750916          NaN   \n",
       "min           NaN  1840.000000     1.000000     1.000000          NaN   \n",
       "25%           NaN  1886.000000     4.000000     8.000000          NaN   \n",
       "50%           NaN  1900.000000     7.000000    15.000000          NaN   \n",
       "75%           NaN  1917.000000    10.000000    23.000000          NaN   \n",
       "max           NaN  1992.000000    12.000000    31.000000          NaN   \n",
       "\n",
       "       birthState birthCity    deathYear   deathMonth     deathDay    ...      \\\n",
       "count        7648      7648  7648.000000  7648.000000  7648.000000    ...       \n",
       "unique        123      3065          NaN          NaN          NaN    ...       \n",
       "top            PA   Chicago          NaN          NaN          NaN    ...       \n",
       "freq          823       236          NaN          NaN          NaN    ...       \n",
       "mean          NaN       NaN  1970.803086     6.487578    15.490063    ...       \n",
       "std           NaN       NaN    27.313464     3.524482     8.803830    ...       \n",
       "min           NaN       NaN  1877.000000     1.000000     1.000000    ...       \n",
       "25%           NaN       NaN  1953.000000     3.000000     8.000000    ...       \n",
       "50%           NaN       NaN  1972.000000     6.000000    15.000000    ...       \n",
       "75%           NaN       NaN  1993.000000    10.000000    23.000000    ...       \n",
       "max           NaN       NaN  2016.000000    12.000000    31.000000    ...       \n",
       "\n",
       "       nameLast    nameGiven       weight       height  bats throws  \\\n",
       "count      7648         7648  7648.000000  7648.000000  7648   7648   \n",
       "unique     4777         5574          NaN          NaN     3      2   \n",
       "top       Smith  John Joseph          NaN          NaN     R      R   \n",
       "freq         73           45          NaN          NaN  5115   6268   \n",
       "mean        NaN          NaN   176.427694    71.231695   NaN    NaN   \n",
       "std         NaN          NaN    14.989417     2.257905   NaN    NaN   \n",
       "min         NaN          NaN   130.000000    65.000000   NaN    NaN   \n",
       "25%         NaN          NaN   165.000000    70.000000   NaN    NaN   \n",
       "50%         NaN          NaN   175.000000    71.000000   NaN    NaN   \n",
       "75%         NaN          NaN   185.000000    73.000000   NaN    NaN   \n",
       "max         NaN          NaN   223.000000    78.000000   NaN    NaN   \n",
       "\n",
       "             debut   finalGame   retroID    bbrefID  \n",
       "count         7648        7648      7648       7648  \n",
       "unique        4479        4510      7648       7648  \n",
       "top     1942-04-14  1945-09-30  gerab101  glenned01  \n",
       "freq            20          39         1          1  \n",
       "mean           NaN         NaN       NaN        NaN  \n",
       "std            NaN         NaN       NaN        NaN  \n",
       "min            NaN         NaN       NaN        NaN  \n",
       "25%            NaN         NaN       NaN        NaN  \n",
       "50%            NaN         NaN       NaN        NaN  \n",
       "75%            NaN         NaN       NaN        NaN  \n",
       "max            NaN         NaN       NaN        NaN  \n",
       "\n",
       "[11 rows x 24 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "#describe columns with text and data.\n",
    "df.describe(include = 'all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>playerID</th>\n",
       "      <th>birthCountry</th>\n",
       "      <th>birthState</th>\n",
       "      <th>birthCity</th>\n",
       "      <th>deathCountry</th>\n",
       "      <th>deathState</th>\n",
       "      <th>deathCity</th>\n",
       "      <th>nameFirst</th>\n",
       "      <th>nameLast</th>\n",
       "      <th>nameGiven</th>\n",
       "      <th>bats</th>\n",
       "      <th>throws</th>\n",
       "      <th>debut</th>\n",
       "      <th>finalGame</th>\n",
       "      <th>retroID</th>\n",
       "      <th>bbrefID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>7648</td>\n",
       "      <td>14</td>\n",
       "      <td>123</td>\n",
       "      <td>3065</td>\n",
       "      <td>9</td>\n",
       "      <td>84</td>\n",
       "      <td>2328</td>\n",
       "      <td>1190</td>\n",
       "      <td>4777</td>\n",
       "      <td>5574</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>4479</td>\n",
       "      <td>4510</td>\n",
       "      <td>7648</td>\n",
       "      <td>7648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>glenned01</td>\n",
       "      <td>USA</td>\n",
       "      <td>PA</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>USA</td>\n",
       "      <td>CA</td>\n",
       "      <td>Philadelphia</td>\n",
       "      <td>Bill</td>\n",
       "      <td>Smith</td>\n",
       "      <td>John Joseph</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>1942-04-14</td>\n",
       "      <td>1945-09-30</td>\n",
       "      <td>gerab101</td>\n",
       "      <td>glenned01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>7415</td>\n",
       "      <td>823</td>\n",
       "      <td>236</td>\n",
       "      <td>7516</td>\n",
       "      <td>970</td>\n",
       "      <td>135</td>\n",
       "      <td>323</td>\n",
       "      <td>73</td>\n",
       "      <td>45</td>\n",
       "      <td>5115</td>\n",
       "      <td>6268</td>\n",
       "      <td>20</td>\n",
       "      <td>39</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         playerID birthCountry birthState birthCity deathCountry deathState  \\\n",
       "count        7648         7648       7648      7648         7648       7648   \n",
       "unique       7648           14        123      3065            9         84   \n",
       "top     glenned01          USA         PA   Chicago          USA         CA   \n",
       "freq            1         7415        823       236         7516        970   \n",
       "\n",
       "           deathCity nameFirst nameLast    nameGiven  bats throws       debut  \\\n",
       "count           7648      7648     7648         7648  7648   7648        7648   \n",
       "unique          2328      1190     4777         5574     3      2        4479   \n",
       "top     Philadelphia      Bill    Smith  John Joseph     R      R  1942-04-14   \n",
       "freq             135       323       73           45  5115   6268          20   \n",
       "\n",
       "         finalGame   retroID    bbrefID  \n",
       "count         7648      7648       7648  \n",
       "unique        4510      7648       7648  \n",
       "top     1945-09-30  gerab101  glenned01  \n",
       "freq            39         1          1  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#describe only columns with text on them\n",
    "df.describe(include = ['O'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
